// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Control Logic
    Not(in=instruction[15], out=instructionA);
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[4], out=writeD);
    Or(a=instructionA, b=instruction[5], out=writeA);

    // The Address (A) Register
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=inA);
    ARegister(in=inA, load=writeA, out=outA, out[0..14]=addressM);

    // The Data (D) Register
    DRegister(in=aluOut, load=writeD, out=outD);

    // ALU
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAorM);
    ALU(
        x=outD,
        y=outAorM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluOut, out=outM,
        zr=aluZero,
        ng=aluNeg);

    // Jump logic
    Xor(a=instruction[1], b=aluZero, out=zeroNotEqual);
    Not(in=zeroNotEqual, out=zeroEqual);

    Xor(a=instruction[2], b=aluNeg, out=negNotEqual);
    Not(in=negNotEqual, out=negEqual);

    And(a=zeroEqual, b=negEqual, out=zeroNegEqual);
    Or(a=aluZero, b=aluNeg, out=zeroOrNeg);

    Mux(a=false, b=zeroNegEqual, sel=instruction[0], out=jumpA1);
    Mux(a=zeroEqual, b=negEqual, sel=instruction[0], out=jumpA2);
    Mux(a=zeroNegEqual, b=zeroEqual, sel=instruction[0], out=jumpA3);
    Mux(a=zeroOrNeg, b=true, sel=instruction[0], out=jumpA4);

    Mux(a=jumpA1, b=jumpA2, sel=instruction[1], out=jumpB1);
    Mux(a=jumpA3, b=jumpA4, sel=instruction[1], out=jumpB2);

    Mux(a=jumpB1, b=jumpB2, sel=instruction[2], out=jump);
    // only allow jump during C-instructions
    And(a=jump, b=instruction[15], out=loadPC);

    // Program Counter
    PC(in=outA, reset=reset, load=loadPC, inc=true, out[0..14]=pc);
}
