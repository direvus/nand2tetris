// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram, heap, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let freeList[0] = 0;
        let freeList[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array curr, prev, best;
        var int target;

        let curr = freeList;
        let target = size + 1;

        while (~(curr = 0)) {
            if (curr[1] = size) {
                // Perfect fit, I'll take it! Remove the entire node from the
                // free space list and immediately return the base address of
                // its data block.
                if (prev = 0) {
                    let freeList = curr[0];
                } else {
                    let prev[0] = curr[0];
                }
                return curr + 2;
            }
            if (curr[1] > target) {
                /* Possible fit: if it's the first one we've found, or it's
                 * smaller than our best find so far, mark it as the current
                 * best find.
                 */
                if (best = 0) {
                    let best = curr;
                } else {
                    if (curr[1] < best[1]) {
                        let best = curr;
                    }
                }
            }

            // Advance to the next free block
            let prev = curr;
            let curr = curr[0];
        }

        if (best = 0) {
            // failed to find any suitable block
            return 0;
        }

        // slice off a segment from the end of our selected block
        let best[1] = best[1] - (size + 2);
        let curr = best + best[1] + 2;
        let curr[0] = 0;
        let curr[1] = size;

        return curr + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array curr;
        // Scan to the end of the free space list.
        let curr = freeList;
        while (~(curr[0] = 0)) {
            let curr = curr[0];
        }
        // Append the deallocated block to the end of the list.
        let curr[0] = o - 2;
        return;
    }
}
